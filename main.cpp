#include "mainwindow.h"

#include <QApplication>

// Добавить поле рождения, добавить роли пользователю, добавить числовое поле
// Добавить в меню вкладку приложение и поместить в него phone, name ..., выход, администрирование
// ToolBar на будущее
// На информацию с колонки устанавливается фильтр, и в рамках фильтра есть поиск
// Например: Фильтр на Фамилию и год рождения, и по этому результату есть поиск по имени(например)

// При использовании QFilterSortProxyModel длительность выполнения увеличивается с кол-ом записей в бд что влияет на производительность
// Но используя другой подход через создание копии текущей модели мы дублируем одни и те же данные, что также может привести к последствиям
// В каких случаях выбирать 1-е или 2-е

// Сменить StackedWidget на QTabWidget(Вкладки) +
// Добавить возможность выбора операции сравнения в фильтр +

// Добавить лимит на отображение кол-ва строк в странице, например, 20
// ( Сделать через QStackedWidget, где на одном виджете хранится 20 строк в view, кнопка переключения, находится на QTabWidget'е, сменяет на сл. виджет)

// Отдельное поток, считающий кол-во страниц ? (Сделал Sql запросом)
// Добавить запуск потоков в фун-ию fillMainTab
// Отдельно 2 потока для прогрузки страниц, т.е человек нажал на 10 страницу, 9 и 11 прогружают два отдельных потока
// Добавить сообщение об окончании работы потока
// Блокировать кнопку переключения на другую страницу в случае если она обрабатывается потоком

// Вопросы:
// 1) Как использовать потоки в данной задаче, если данные уже загружаются в модель и единственное что нужно сделать это добавить соотв. виджеты, которые можно добавлять только с GUI потока
// 2) Если использовать потоки, то можно присоединить слот к потоку, который будет добавлять виджеты или как-то так?(Решение [1] через сигналы/слоты)
// 3) Если использовать потоки, то можно создать отдельный класс, объект которого будет заполнять переданный виджет, который будет сам создавать поток
// 4) Использовать std потоки или qt
// 5) Можно убрать кнопку search, поскольку фильтр позволяет отобрать нужные элементы, равные введенному значению
// 6) Создается слишком много прокси моделей, поскольку нужно отображать только некоторый набор строк, а изменять/дублировать саму модель не очень практично.
// Также минус, это то, что каждая модель по-сути перебирает по 10к строк, что очень медленно. Вместо этого можно было бы иметь proxyModel с конкретным кол-ом строк
// Но тогда нужно разбить саму модель на множество более маленьких моделей и хранить указатели на них в контейнере.

int main(int argc, char *argv[])
{

    QApplication a(argc, argv);
    MainWindow w;
    w.show();
    return a.exec();
}
